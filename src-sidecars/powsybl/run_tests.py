#!/usr/bin/env python3
"""
Script pour ex√©cuter les tests unitaires du ConfigController
"""

import subprocess
import sys
from pathlib import Path


def run_tests():
    """Ex√©cute les tests unitaires avec pytest"""

    # V√©rifier que nous sommes dans le bon r√©pertoire
    current_dir = Path.cwd()
    if not (current_dir / "src").exists():
        print("‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis la racine du projet")
        return False

    print("üöÄ Lancement des tests unitaires...")
    print("-" * 50)

    # Commande pytest avec options
    cmd = [
        sys.executable, "-m", "pytest",
        "tests/test_config_controller.py",
        "-v",  # verbose
        "--tb=short",  # traceback format
        "--cov=src.config.config_controller",  # coverage sp√©cifique
        "--cov-report=term-missing",
        "--cov-report=html:htmlcov",
        "--color=yes"
    ]

    try:
        result = subprocess.run(cmd, check=True)
        print("\n‚úÖ Tous les tests sont pass√©s avec succ√®s!")
        print("üìä Rapport de couverture HTML g√©n√©r√© dans: htmlcov/index.html")
        return True

    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå √âchec des tests (code de retour: {e.returncode})")
        return False

    except FileNotFoundError:
        print("‚ùå Erreur: pytest n'est pas install√©")
        print("üí° Installez les d√©pendances avec: pip install -r requirements-test.txt")
        return False


def run_specific_test(test_name):
    """Ex√©cute un test sp√©cifique"""

    cmd = [
        sys.executable, "-m", "pytest",
        f"tests/test_config_controller.py::{test_name}",
        "-v", "-s"
    ]

    try:
        subprocess.run(cmd, check=True)
        print(f"‚úÖ Test {test_name} ex√©cut√© avec succ√®s!")

    except subprocess.CalledProcessError:
        print(f"‚ùå √âchec du test {test_name}")


def run_with_coverage():
    """Ex√©cute les tests avec un rapport de couverture d√©taill√©"""

    cmd = [
        sys.executable, "-m", "pytest",
        "tests/test_config_controller.py",
        "--cov=src.config.config_controller",
        "--cov-report=term-missing",
        "--cov-report=html:htmlcov",
        "--cov-fail-under=80",  # Fail si couverture < 80%
        "-v"
    ]

    try:
        subprocess.run(cmd, check=True)
        print("‚úÖ Tests pass√©s avec couverture suffisante!")

    except subprocess.CalledProcessError:
        print("‚ùå Tests √©chou√©s ou couverture insuffisante")


def main():
    """Point d'entr√©e principal"""

    if len(sys.argv) > 1:
        command = sys.argv[1]

        if command == "coverage":
            run_with_coverage()
        elif command.startswith("test_"):
            run_specific_test(command)
        else:
            print(f"‚ùå Commande inconnue: {command}")
            print("üí° Utilisation:")
            print("  python run_tests.py                    # Tous les tests")
            print("  python run_tests.py coverage           # Tests avec couverture")
            print("  python run_tests.py test_load_config   # Test sp√©cifique")
    else:
        run_tests()


if __name__ == "__main__":
    main()